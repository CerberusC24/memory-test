{"version":3,"sources":["components/CharacterCard/index.js","components/NavBar/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["CharacterCard","props","react_default","a","createElement","onClick","handleClick","id","className","alt","name","src","image","NavBar","counter","topScore","Wrapper","children","App","state","characterList","characters","characterID","characterListCopy","Object","toConsumableArray","_this","console","log","isCorrect","forEach","character","isClicked","setState","sort","Math","random","swal","_this2","this","components_NavBar","components_Wrapper","map","kombatant","components_CharacterCard","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4VAkBeA,MAff,SAAuBC,GACrB,OACEC,EAAAC,EAAAC,cAAA,OACEC,QAAS,kBAAMJ,EAAMK,YAAYL,EAAMM,KACvCC,UAAU,WACVD,GAAG,cACHL,EAAAC,EAAAC,cAAA,OAAKI,UAAU,iBACbN,EAAAC,EAAAC,cAAA,OACAK,IAAKR,EAAMS,KACXC,IAAKV,EAAMW,iBCQJC,MAjBf,SAAgBZ,GACd,OACEC,EAAAC,EAAAC,cAAA,OAAKI,UAAU,+FACbN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,sBACbN,EAAAC,EAAAC,cAAA,MAAII,UAAU,8BAAd,yBAIFN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAII,UAAU,8BAAd,kBACkBP,EAAMa,QADxB,iBAC+Cb,EAAMc,mBCL9CC,MALf,SAAiBf,GACf,OAAOC,EAAAC,EAAAC,cAAA,OACPI,UAAU,WAAWP,EAAMgB,kBC0GdC,oNApGbC,MAAQ,CACNC,cAAeC,EACfP,QAAS,EACTC,SAAU,KAIZT,YAAc,SAACgB,GAGb,IAAMC,EAAiBC,OAAAC,EAAA,EAAAD,CAAOE,EAAKP,MAAMC,eACzCO,QAAQC,IAAIL,GAGZ,IAAIM,GAAY,EAahB,GAVAN,EAAkBO,QAAQ,SAAAC,GACpBA,EAAUxB,KAAOe,IACdS,EAAUC,YACbH,GAAY,EACZE,EAAUC,WAAY,MAMxBH,EAAW,CAGb,IAAMf,EAAUY,EAAKP,MAAML,QAAU,EAErCY,EAAKO,SAAS,CACZnB,QAASA,EACTC,SAAWD,GAAWY,EAAKP,MAAMJ,SAAaD,EAAYY,EAAKP,MAAMJ,SACrEK,cAAeG,EAAkBW,KAAK,iBAAM,GAAKC,KAAKC,kBAGzB,KAAxBV,EAAKP,MAAMJ,UAClBW,EAAKO,SAAS,CACZnB,QAAS,EACTM,cAAeG,EAAkBW,KAAK,iBAAM,GAAMC,KAAKC,aAEzDC,IACEnC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,6BAMJmB,EAAkBO,QAAQ,SAAAC,GACxBA,EAAUC,WAAY,IAExBN,EAAKO,SAAS,CACZnB,QAAS,EACTM,cAAeG,EAAkBW,KAAK,iBAAM,GAAMC,KAAKC,aAEzDC,IACEnC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,mGAMC,IAAAkC,EAAAC,KAECnB,EAAkBmB,KAAKpB,MAAvBC,cAER,OACElB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACoC,EAAD,CACE1B,QAASyB,KAAKpB,MAAML,QACpBC,SAAUwB,KAAKpB,MAAMJ,WAGvBb,EAAAC,EAAAC,cAAA,MAAII,UAAU,0BAAd,cAEAN,EAAAC,EAAAC,cAACqC,EAAD,KAEIrB,EAAcsB,IAAI,SAAAC,GAChB,OACEzC,EAAAC,EAAAC,cAACwC,EAAD,CACEC,IAAKF,EAAUpC,GACfK,MAAO+B,EAAU/B,MACjBL,GAAIoC,EAAUpC,GACdD,YAAagC,EAAKhC,yBA5FlBwC,IAAMC,YCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.192d9b89.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction CharacterCard(props) {\r\n  return (\r\n    <div\r\n      onClick={() => props.handleClick(props.id)}     \r\n      className=\"card m-2\"\r\n      id=\"click-item\">\r\n      <div className=\"img-container\">\r\n        <img \r\n        alt={props.name} \r\n        src={props.image}/>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CharacterCard;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction NavBar(props) {\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark sticky-top w-100 text-justify-center text-light\">\r\n      <div className=\"navbar-nav mr-auto\">\r\n        <h2 className=\"nav-item text-align-center\">\r\n          Test Your M...emory!\r\n        </h2>\r\n      </div>\r\n      <div>\r\n        <h2 className=\"nav-item text-align-center\">\r\n          Current Score: {props.counter} / Top Score: {props.topScore}\r\n        </h2>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div \r\n  className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from 'react';\nimport swal from '@sweetalert/with-react';\nimport CharacterCard from './components/CharacterCard';\nimport NavBar from './components/NavBar';\nimport Wrapper from './components/Wrapper';\nimport characters from './characters.json';\nimport './App.css';\n\nclass App extends React.Component {\n\n  // set up state and have it keep track of our imported characterList\n  state = {\n    characterList: characters,\n    counter: 0,\n    topScore: 0,\n  }\n\n  // create method to re-order the array on card click:\n  handleClick = (characterID) => {\n\n    // make a copy\n    const characterListCopy = [...this.state.characterList];\n    console.log(characterListCopy)\n\n    // create a logical flag\n    let isCorrect = false;\n\n    // iterate through characterListCopy\n    characterListCopy.forEach(character => {\n      if (character.id === characterID) {\n        if (!character.isClicked) {\n          isCorrect = true;\n          character.isClicked = true;\n        }\n      }\n    })\n\n    // if isCorrect is true, run logic for increasing point\n    if (isCorrect) {\n\n      \n      const counter = this.state.counter + 1;\n      // increase count by one, check if top score should be updated, and shuffle cards\n      this.setState({\n        counter: counter,\n        topScore: (counter >= this.state.topScore) ? (counter) : (this.state.topScore),\n        characterList: characterListCopy.sort(() => .5 - Math.random())\n      })\n    }\n    else if (this.state.topScore === 32) {\n      this.setState({\n        counter: 0,\n        characterList: characterListCopy.sort(() => 0.5 - Math.random())\n      })\n      swal(\n        <div>\n          <h1>You Win!</h1>\n          <h3>Play Again?</h3>\n        </div>\n      )\n    }\n    else {\n      // reset characters\n      characterListCopy.forEach(character => {\n        character.isClicked = false;\n      })\n      this.setState({\n        counter: 0,\n        characterList: characterListCopy.sort(() => 0.5 - Math.random())\n      })\n      swal(\n        <div>\n          <h1>You Lose!</h1>\n          <h3>Continue?</h3>\n        </div>\n      )\n    }\n  }\n\n  render() {\n    // save ref to friendList in state\n    const { characterList } = this.state;\n\n    return (\n      <div>\n        <NavBar\n          counter={this.state.counter}\n          topScore={this.state.topScore}>\n        </NavBar>\n\n        <h1 className=\"justify-content-around\">Kombatants</h1>\n\n        <Wrapper>\n          {\n            characterList.map(kombatant => {\n              return (\n                <CharacterCard\n                  key={kombatant.id}\n                  image={kombatant.image}\n                  id={kombatant.id}\n                  handleClick={this.handleClick}\n                />\n              )\n            })\n          }\n        </Wrapper>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}